<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="description" content="" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <!-- The above 4 meta tags *must* come first in the head; any other head content must come *after* these tags -->

  <!-- Title -->
  <title>Streaming</title>

  <!-- Favicon -->
  <link rel="icon" href="/img/core-img/favicon.ico" />

  <!-- Core Stylesheet -->
  <link rel="stylesheet" href="/style.css" />
  <link rel="stylesheet" href="/css/mystyle.css" />
  <link rel="stylesheet" href="/css/stream.css" />
  <!-- Font Awesome Icon -->
  <link rel="stylesheet" href="/css/font-awesome.min.css" />

  <!-- Canvas css -->
  <style type="text/css">
    /* #upload-button {
      width: 150px;
      display: block;
      margin: 20px auto;
    } */

    #file-to-upload {
      display: none;
    }

    #pdf-main-container {
      margin: 1em;
    }

    #pdf-loader {
      display: none;
      text-align: center;
      color: #999999;
      font-size: 13px;
      line-height: 100px;
      height: 100px;
    }

    #pdf-contents {
      display: inline;
      width: 100%;
    }

    #pdf-meta {
      overflow: hidden;
      margin: 0 0 20px 0;
    }

    #pdf-buttons {
      float: left;
    }

    #page-count-container {
      float: right;
    }

    #pdf-current-page {
      display: inline;
    }

    #pdf-total-pages {
      display: inline;
    }

    #paper {
      width: 100%;
      border: 1px solid rgba(0, 0, 0, 0.2);
      box-sizing: border-box;
    }

    #page-loader {
      height: 100px;
      line-height: 100px;
      text-align: center;
      display: none;
      color: #999999;
      font-size: 13px;
    }

    #download-image {
      width: 150px;
      display: block;
      margin: 20px auto 0 auto;
      font-size: 13px;
      text-align: center;
    }
  </style>
</head>

<body onload="prepareCAMDevice()">
  <!-- ##### Preloader ##### -->
  <div id="preloader">
    <i class="circle-preloader"></i>
  </div>

  <div class="m-3 p-4 bg-success"></div>

  <!-- ##### About Us Area Start ##### -->
  <section class="about-us-area section-padding-0">
    <div id="live-stream" class="container-fluid">
      <div class="row" style="height: 100vh;">
        <div class="col-2 pl-1 pr-1">
          <div class="panel-main-stream card border-success">
            <div>
              <div class="list-group">
                <div class="list-group-item list-group-item-action p-3">
                  <img class="mr-2" src="/img/stream/user-icon.png" width="20px" alt="user-icon" />
                  Adam
                </div>
                <div class="list-group-item list-group-item-action list-group-item-secondary p-3">
                  <img class="mr-2" src="/img/stream/user-icon.png" width="20px" alt="user-icon" />
                  Linda
                </div>
              </div>
            </div>
            <div class="panel-main-webcam card border-success">
              <video id="local-video" autoplay playinline controls style="width:100%; height:100%">
            </div>
          </div>
        </div>
        <div class="col-7">
          <div class="panel-main-stream border-success">
            <button id="upload-button" type="button" class="btn btn-default">
              <i class="fa fa-upload"></i> Select PDF
            </button>
            <button id="live-button" type="button" class="btn btn-default">
              <i class="fa fa-video-camera"></i> Live
            </button>
            <button id="stop-live-button" type="button" class="btn btn-default">
              <i class="fa fa-stop"></i> Stop Live
            </button>
            <button id="pencil-button" type="button" class="btn btn-default">
              <i class="fa fa-pencil"></i> Pencil
            </button>
            <button id="highlight-button" type="button" class="btn btn-default">
              <i class="fa fa-paint-brush"></i> Highlight
            </button>
            <button id="undo-button" type="button" class="btn btn-default">
              <i class="fa fa-history"></i> Undo
            </button>
            <button id="clear-button" type="button" class="btn btn-default">
              <i class="fa fa-eraser"></i> Eraser All
            </button>
            <button type="button" class="btn btn-default">
              <i class="fa fa-search-plus"></i> Zoom
            </button>

            <input type="file" id="file-to-upload" accept="application/pdf" />

            <div id="pdf-main-container">
              <div id="pdf-loader">Loading document ...</div>
              <div id="pdf-contents">
                <div id="pdf-meta">


                </div>
                <canvas id="paper" style="display: inline;"></canvas>
                <div id="page-loader">Loading page ...</div>

                <!-- <div style="width: 25%; margin: 10px auto;"> -->
                <div>
                  <!-- <a id="download-image" href="#">Download PNG</a> -->
                  <div id="pdf-buttons">
                    <button id="pdf-prev" class="btn btn-default">
                      <i class="fa fa-angle-left"></i> Previous
                    </button>
                    <input type="text" id="pdf-current-page" style="width: 25px" /> / 600
                    <button id="pdf-next" class="btn btn-default">
                      Next <i class="fa fa-angle-right"></i>
                    </button>
                  </div>
                  <!-- <div id="page-count-container">Page <div id="pdf-current-page"></div> of <div id="pdf-total-pages">
                    </div>
                  </div> -->
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="col-3 pl-1 pr-1">
          <div class="panel-main-chat card border-success border-1 p-2">
            <div class="panel-body">
              <ul class="chat">
                <li class="left clearfix">
                  <strong>Adam</strong>
                  <span>&nbsp;:&nbsp;</span>
                  <span>Hi !</span>
                </li>
                <li class="left clearfix">
                  <strong>Adam</strong>
                  <span>&nbsp;:&nbsp;</span>
                  <span>Hi !</span>
                </li>
                <li class="left clearfix">
                  <strong>Adam</strong>
                  <span>&nbsp;:&nbsp;</span>
                  <span>Hi !</span>
                </li>
              </ul>
            </div>
            <div class="panel-footer">
              <div class="input-group">
                <input id="btn-input" type="text" class="form-control input-sm"
                  placeholder="Type your message here..." />
                <span class="input-group-btn">
                  <button class="btn btn-info" id="btn-chat">
                    Send
                  </button>
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  <!-- ##### About Us Area End ##### -->

  <!-- ##### All Javascript Script ##### -->
  <!-- jQuery-2.2.4 js -->
  <script src="/js/jquery/jquery-2.2.4.min.js"></script>
  <!-- Popper js -->
  <script src="/js/bootstrap/popper.min.js"></script>
  <!-- Bootstrap js -->
  <script src="/js/bootstrap/bootstrap.min.js"></script>
  <!-- All Plugins js -->
  <script src="/js/plugins/plugins.js"></script>
  <!-- Active js -->
  <script src="/js/active.js"></script>
  <!-- UUID V4-->
  <script src="/js/uuid.min.js"></script>
  <!-- Socket io-->
  <script src="/socket.io/socket.io.js"></script>
  <!-- Live JS-->
  <script src="/js/live.js"></script>
  <!-- Common JS-->
  <!-- <script src="/js/common.js"></script> -->

  <!-- Canvas JS -->
  <script src="/js/pdf.js"></script>
  <script src="/js/pdf.worker.js"></script>
  <script src="/js/draw-script.js"></script>
  <script>


    //FIXME Lỗi co giật layout khi undo một số trang. Do hiển thị Loading status
    const drawType = {
      PENCIL: 0,
      HIGHLIGHT: 1,
      CLEAR: 2
    }

    var drawMethod = drawType.PENCIL;
    //Lưu thông tin về draw
    var points = {};

    var __PDF_DOC,
      __CURRENT_PAGE,
      __TOTAL_PAGES,
      __PAGE_RENDERING_IN_PROGRESS = 0,
      __CANVAS = $('#paper').get(0),
      __CANVAS_CTX = __CANVAS.getContext('2d');

    // var canvas = $('#paper');

    /**
     * @author Nguyễn Thế Sơn
     * @description Nạp file PDF vào module pdfjs và hiển thị.
     */
    function showPDF(pdf_url) {
      $("#pdf-loader").show();

      PDFJS.getDocument({ url: pdf_url }).then(function (pdf_doc) {
        __PDF_DOC = pdf_doc;
        __TOTAL_PAGES = __PDF_DOC.numPages;

        // Hide the pdf loader and show pdf container in HTML
        $("#pdf-loader").hide();
        $("#pdf-contents").show();
        $("#pdf-total-pages").text(__TOTAL_PAGES);

        prepareSlideDevice(__CANVAS);

        // Show the first page
        showPage(1);
      }).catch(function (error) {
        // If error re-show the upload button
        $("#pdf-loader").hide();
        $("#upload-button").show();

        alert(error.message);
      });;
    }

    /**
     * @author Nguyễn Thế Sơn
     * @description Hiển thị (một) trang PDF
     */
    function showPage(page_no, notReDraw) {
      if(__PAGE_RENDERING_IN_PROGRESS) return Promise.reject("Not finish");
      __PAGE_RENDERING_IN_PROGRESS = 1;
      __CURRENT_PAGE = page_no;

      // Disable Prev & Next buttons while page is being loaded
      $("#pdf-next, #pdf-prev").attr('disabled', 'disabled');

      // While page is being rendered hide the canvas and show a loading message
      $("#paper").hide();
      $("#page-loader").show();
      $("#download-image").hide();

      // Update current page in HTML
      $("#pdf-current-page").text(page_no);

      // Fetch the page
      return __PDF_DOC.getPage(page_no).then(function (page) {
        // As the canvas is of a fixed width we need to set the scale of the viewport accordingly
        __CANVAS.width = 700;
        var scale_required = __CANVAS.width / page.getViewport(1).width

        console.log('pdf size:', page.getViewport(1).width, 'canvas size:', __CANVAS.width)
        console.log('scale_required:', scale_required);

        // Get viewport of the page at required scale
        var viewport = page.getViewport(scale_required);

        // Set canvas height
        __CANVAS.height = viewport.height;

        var renderContext = {
          canvasContext: __CANVAS_CTX,
          viewport: viewport
        };


      //Xóa Canvas và render lại
      __CANVAS_CTX.globalCompositeOperation = "source-over";
      __CANVAS_CTX.clearRect(0, 0, __CANVAS.width, __CANVAS.height);

        // Render the page contents in the canvas
        return page.render(renderContext).then(function () {
          __PAGE_RENDERING_IN_PROGRESS = 0;

          // Re-enable Prev & Next buttons
          $("#pdf-next, #pdf-prev").removeAttr('disabled');

          // Show the canvas and hide the page loader
          $("#paper").show();
          $("#page-loader").hide();
          $("#download-image").show();

          // //@author NTS > Testing purpose.
          // document.querySelector('video#remoteVideo').srcObject = __CANVAS.captureStream()
          // console.log('Finish mapping!')

          //Kiểm tra Page này đã được draw hay chưa?
          if (!points[page_no]) {
            console.log('Dữ liệu về Page:', page_no, 'không tồn tại')
            points[page_no] = [];
          } else if(!notReDraw) {
            //TODO ReDraw lại Page với các points được lưu
            console.log('Có thông tin về Page');
            reDrawAll();
          }
          Promise.resolve("OKE")
        });
      });
    }

    // Upon click this should should trigger click on the #file-to-upload file input element
    // This is better than showing the not-good-looking file input element
    $("#upload-button").on('click', function () {
      $("#file-to-upload").trigger('click');
    });

    // When user chooses a PDF file
    $("#file-to-upload").on('change', function () {
      // Validate whether PDF
      if (['application/pdf'].indexOf($("#file-to-upload").get(0).files[0].type) == -1) {
        alert('Error : Not a PDF');
        return;
      }

      // $("#upload-button").hide();

      // Send the object url of the pdf
      showPDF(URL.createObjectURL($("#file-to-upload").get(0).files[0]));
    });

    // Previous page of the PDF
    $("#pdf-prev").on('click', function () {
      if (__CURRENT_PAGE != 1)
        showPage(--__CURRENT_PAGE);
    });

    // Next page of the PDF
    $("#pdf-next").on('click', function () {
      if (__CURRENT_PAGE != __TOTAL_PAGES)
        showPage(++__CURRENT_PAGE);
    });

    // Download button
    $("#download-image").on('click', function () {
      $(this).attr('href', __CANVAS.toDataURL()).attr('download', 'page.png');
    });

    $('#live-button').on('click', function () {
      startStreaming();
    })

    $('#stop-live-button').on('click', function () {
      stopStreaming();
    })

    $('#highlight-button').on('click', function () {
      console.log('Highlight is ON');
      drawMethod = drawType.HIGHLIGHT;
      $('canvas').hover(function () {
        //TODO Chưa thay đổi Cursor
        console.log('Canvas Hover');
        document.getElementById('paper').style.cursor = "url('/icon/paint-brush-solid.svg'), auto";
      })
    })

    $('#pencil-button').on('click', function () {
      drawMethod = drawType.PENCIL;
    });

    var undoInterval;
    $('#undo-button').mousedown(function () {
      undoInterval = setInterval(undoDraw, 50);
      // undoDraw();
    }).mouseup(function () {
      clearInterval(undoInterval);
    });

    $('#clear-button').on('click', function () {
      clearAllDraw();
    })

    /**
     * @author Nguyễn Thế Sơn
     * @description Vẽ lại tất cả các draw được lưu trong points.
     */
    function reDrawAll() {

      for (let i = 0; i < points[__CURRENT_PAGE].length; i++) {
          console.log('Loop')
          let pt = points[__CURRENT_PAGE][i];

          if (pt.drawMethod === drawType.HIGHLIGHT) {
            __CANVAS_CTX.globalCompositeOperation = "multiply";
            __CANVAS_CTX.fillStyle = "#ff0";
            __CANVAS_CTX.fillRect(pt.toX, pt.toY, 20, 20);
          } else if (pt.drawMethod === drawType.PENCIL) {
            __CANVAS_CTX.globalCompositeOperation = "source-over";
            __CANVAS_CTX.moveTo(pt.fromX, pt.fromY);
            __CANVAS_CTX.lineTo(pt.toX, pt.toY);
            __CANVAS_CTX.stroke();
          } else if (pt.drawMethod === drawType.CLEAR) {
            // showPage(__CURRENT_PAGE);
          }
        }
    }

    /**
     * @author Nguyễn Thế Sơn
     * @description Xóa toàn bộ nét vẽ trên trang. Và lưu lại việc này trong points để Undo nếu cần.
     */
    function clearAllDraw() {
      showPage(__CURRENT_PAGE, true);
      //TODO Delete draw save
      points[__CURRENT_PAGE].push({
        drawMethod: drawType.CLEAR
      })
    }

    /**
     * @author Nguyễn Thế Sơn
     * @description Undo một nét vẽ và vẽ lại Canvas.
     */
    function undoDraw() {
      console.log('UndoDraw is call')
      points[__CURRENT_PAGE].pop();
      return showPage(__CURRENT_PAGE).then(function () {
        Promise.resolve("OKE")
      })
    }

    // -------------------------- ZOOM CODE GO HERE -------------------//
    // trackTransforms(__CANVAS_CTX);
    // function redraw() {
		// 		// Clear the entire canvas
		// 		var p1 = __CANVAS_CTX.transformedPoint(0, 0);
		// 		var p2 = __CANVAS_CTX.transformedPoint(__CANVAS.width, __CANVAS.height);
		// 		__CANVAS_CTX.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);

		// 		__CANVAS_CTX.drawImage(__CANVAS_CTX.canvas, 200, 50);

		// 	}
		// 	redraw();

		// 	var lastX = __CANVAS.width / 2, lastY = __CANVAS.height / 2;
		// 	var dragStart, dragged;
		// 	__CANVAS.addEventListener('mousedown', function (evt) {
		// 		document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';
		// 		lastX = evt.offsetX || (evt.pageX - __CANVAS.offsetLeft);
		// 		lastY = evt.offsetY || (evt.pageY - __CANVAS.offsetTop);
		// 		dragStart = __CANVAS_CTX.transformedPoint(lastX, lastY);
		// 		dragged = false;
		// 	}, false);
		// 	__CANVAS.addEventListener('mousemove', function (evt) {
		// 		lastX = evt.offsetX || (evt.pageX - __CANVAS.offsetLeft);
		// 		lastY = evt.offsetY || (evt.pageY - __CANVAS.offsetTop);
		// 		dragged = true;
		// 		if (dragStart) {
		// 			var pt = __CANVAS_CTX.transformedPoint(lastX, lastY);
		// 			__CANVAS_CTX.translate(pt.x - dragStart.x, pt.y - dragStart.y);
		// 			redraw();
		// 		}
		// 	}, false);
		// 	__CANVAS.addEventListener('mouseup', function (evt) {
		// 		dragStart = null;
		// 		if (!dragged) zoom(evt.shiftKey ? -1 : 1);
		// 	}, false);

		// 	var scaleFactor = 1.1;
		// 	var zoom = function (clicks) {
		// 		var pt = __CANVAS_CTX.transformedPoint(lastX, lastY);
		// 		__CANVAS_CTX.translate(pt.x, pt.y);
		// 		var factor = Math.pow(scaleFactor, clicks);
		// 		__CANVAS_CTX.scale(factor, factor);
		// 		__CANVAS_CTX.translate(-pt.x, -pt.y);
		// 		redraw();
		// 	}

		// 	var handleScroll = function (evt) {
		// 		var delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;
		// 		if (delta) zoom(delta);
		// 		return evt.preventDefault() && false;
		// 	};
		// 	__CANVAS.addEventListener('DOMMouseScroll', handleScroll, false);
		// 	__CANVAS.addEventListener('mousewheel', handleScroll, false);
      



    //   // Adds ctx.getTransform() - returns an SVGMatrix
		// // Adds ctx.transformedPoint(x,y) - returns an SVGPoint
		// function trackTransforms(ctx) {
		// 	var svg = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
		// 	var xform = svg.createSVGMatrix();
		// 	__CANVAS_CTX.getTransform = function () { return xform; };

		// 	var savedTransforms = [];
		// 	var save = __CANVAS_CTX.save;
		// 	__CANVAS_CTX.save = function () {
		// 		savedTransforms.push(xform.translate(0, 0));
		// 		return save.call(__CANVAS_CTX);
		// 	};
		// 	var restore = __CANVAS_CTX.restore;
		// 	__CANVAS_CTX.restore = function () {
		// 		xform = savedTransforms.pop();
		// 		return restore.call(__CANVAS_CTX);
		// 	};

		// 	var scale = __CANVAS_CTX.scale;
		// 	__CANVAS_CTX.scale = function (sx, sy) {
		// 		xform = xform.scaleNonUniform(sx, sy);
		// 		return scale.call(__CANVAS_CTX, sx, sy);
		// 	};
		// 	var rotate = __CANVAS_CTX.rotate;
		// 	__CANVAS_CTX.rotate = function (radians) {
		// 		xform = xform.rotate(radians * 180 / Math.PI);
		// 		return rotate.call(__CANVAS_CTX, radians);
		// 	};
		// 	var translate = __CANVAS_CTX.translate;
		// 	__CANVAS_CTX.translate = function (dx, dy) {
		// 		xform = xform.translate(dx, dy);
		// 		return translate.call(__CANVAS_CTX, dx, dy);
		// 	};
		// 	var transform = __CANVAS_CTX.transform;
		// 	__CANVAS_CTX.transform = function (a, b, c, d, e, f) {
		// 		var m2 = svg.createSVGMatrix();
		// 		m2.a = a; m2.b = b; m2.c = c; m2.d = d; m2.e = e; m2.f = f;
		// 		xform = xform.multiply(m2);
		// 		return transform.call(__CANVAS_CTX, a, b, c, d, e, f);
		// 	};
		// 	var setTransform = __CANVAS_CTX.setTransform;
		// 	__CANVAS_CTX.setTransform = function (a, b, c, d, e, f) {
		// 		xform.a = a;
		// 		xform.b = b;
		// 		xform.c = c;
		// 		xform.d = d;
		// 		xform.e = e;
		// 		xform.f = f;
		// 		return setTransform.call(__CANVAS_CTX, a, b, c, d, e, f);
		// 	};
		// 	var pt = svg.createSVGPoint();
		// 	__CANVAS_CTX.transformedPoint = function (x, y) {
		// 		pt.x = x; pt.y = y;
		// 		return pt.matrixTransform(xform.inverse());
		// 	}
		// }
// ------- ZOOM CODE END HERE ------ //

  </script>
</body>

</html>